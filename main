from tkinter import *
import sqlite3
from selenium import webdriver
from bs4 import BeautifulSoup
import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Placement info
btn_placement_info = {'relx': 0.5, 'rely': 0.85, 'anchor': 'center'}
SXR8_place_info = {'relx': 0.5, 'rely': 0.15, 'anchor': 'center'}

# Widget width & height
widget_width = 25
widget_height = 2

# Initialization
in_per_day = 1440  # interval per day
email_rate = 5
price=0.0
def next_page():
    global btn_placement_info

    # Destroy the current page content
    label_SXR8_price.pack_forget()
    btn.pack_forget()
    just_label_SXR8.forget()
    # Create a new frame for the next page
    next_page_frame = Frame(root, background="#AFE1AF")
    next_page_frame.pack(fill="both", expand=True)

    ################DATA_BASE###########################
    # Create or connect to the SQLite database
    conn = sqlite3.connect('emails.db')
    c = conn.cursor()

    # Create a table to store emails
    c.execute('''CREATE TABLE IF NOT EXISTS emails (
                 email TEXT PRIMARY KEY
                 )''')

    okno_vnos_email = Frame(next_page_frame)
    okno_vnos_email.place(relx=0.5, rely=0.3, anchor="center")
    okno_vnos_email.configure(borderwidth=2, relief="solid")

    vnos_email = Entry(okno_vnos_email, font=("Arial", 20), width=30)
    vnos_email.pack()

    ###########################################################################################################
    def akcija_dodaj_email():
        input_text = vnos_email.get()
        c.execute("SELECT * FROM emails WHERE email=?", (input_text,))
        if c.fetchone() is not None:
            print("Email already exists")
            info_vrstica_txt.set("Email already exists in the database")  # Update info label text
        elif '@' in input_text:
            try:
                c.execute("INSERT INTO emails (email) VALUES (?)", (input_text,))
                conn.commit()
                vnos_email.delete(0, 'end')  # Clear entry widget
                info_vrstica_txt.set("Email has been added")  # Update info label text
            except sqlite3.IntegrityError:
                print("Email already exists")
                info_vrstica_txt.set("Email already exists")  # Update info label text
        else:
            print("Not a correct email address")
            info_vrstica_txt.set("Not a correct email address")  # Update info label text

    ###########################################################################################################
    def delete_email():
        input_text = vnos_email.get()
        c.execute("SELECT * FROM emails WHERE email=?", (input_text,))
        if c.fetchone() is None:
            print("Email does not exist")
            info_vrstica_txt.set("Email does not exist in the database")  # Update info label text
        else:
            try:
                c.execute("DELETE FROM emails WHERE email=?", (input_text,))
                conn.commit()
                vnos_email.delete(0, 'end')  # Clear entry widget
                info_vrstica_txt.set("Email has been deleted")  # Update info label text
            except sqlite3.Error:
                print("Error deleting email")

    info_vrstica_txt = StringVar()  # Define a StringVar for info label text
    ###########################################################################################################
    Add_mail_BTN = Button(next_page_frame,
                          text="ADD",
                          command=akcija_dodaj_email,
                          font=("Arial", 15),
                          fg="#227d22",
                          bg="Black",
                          activeforeground="#227d22",
                          activebackground="#00ff00",
                          width=10
                          )
    Add_mail_BTN.place(relx=0.4, rely=0.45, anchor="center")

    Delete_mail_BTN = Button(next_page_frame,
                             text="DELETE",
                             command=delete_email,
                             font=("Arial", 15),
                             fg="#227d22",
                             bg="Black",
                             activeforeground="#227d22",
                             activebackground="#00ff00",
                             width=10
                             )
    Delete_mail_BTN.place(relx=0.6, rely=0.45, anchor="center")

    info_label = Label(next_page_frame,
                       textvariable=info_vrstica_txt,
                       font=("Arial", 20),
                       background="#AFE1AF",
                       )
    info_label.place(relx=0.5, rely=0.65, anchor="center")

    # Button to navigate back to the main page
    back_btn = Button(next_page_frame,
                      text="Main Page",
                      command=lambda: back_to_main(next_page_frame),
                      font=("Arial", 15),
                      fg="#227d22",
                      bg="Black",
                      activeforeground="#227d22",
                      activebackground="#00ff00",
                      )
    back_btn.place(relx=btn_placement_info['relx'], rely=btn_placement_info['rely'], anchor=btn_placement_info['anchor'])

###########################################################################################################
def back_to_main(frame):
    global btn_placement_info

    frame.destroy()  # Destroy the current frame
    label_SXR8_price.place(relx=0, rely=0.25, anchor="nw")

    # Repack the "Next Page" button using its original placement information
    btn.place(relx=btn_placement_info['relx'], rely=btn_placement_info['rely'],
              anchor=btn_placement_info['anchor'])

    # Repack/Replace just_label_SXR8
    just_label_SXR8.place(relx=SXR8_place_info['relx'], rely=SXR8_place_info['rely'],
                           anchor=SXR8_place_info['anchor'])

###########################################################################################################
root = Tk()
root.configure(background="#AFE1AF")
root.geometry("800x600")
root.title("$tock check")
#icon_photo = PhotoImage(file='C:/Users/nikni/Desktop/SXR8_program/logo_48x48.png') add your own photo
#root.iconphoto(True, icon_photo)

###########################################################################################################
def save_to_database(price):
    conn = sqlite3.connect('prices.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS SXR8_prices
                 (id INTEGER PRIMARY KEY, price TEXT, date_collected TEXT)''')
    now = datetime.datetime.now()
    date_collected = now.strftime("%Y-%m-%d %H:%M:%S")
    c.execute("INSERT INTO SXR8_prices (price, date_collected) VALUES (?, ?)", (price, date_collected))
    conn.commit()
    conn.close()

###########################################################################################################
def print_database():
    conn = sqlite3.connect('prices.db')
    c = conn.cursor()
    c.execute("SELECT * FROM SXR8_prices")
    rows = c.fetchall()
    print("\nDatabase Contents:")
    for row in rows:
        print(row)
    conn.close()
###########################################################################################################
def check_SXR8():
    global in_per_day  # Access the global variable
    global price
    url = 'https://www.cnbc.com/quotes/SXR8-DE'
    driver = webdriver.Chrome()
    driver.get(url)
    driver.implicitly_wait(10)
    page_source = driver.page_source
    driver.quit()
    soup = BeautifulSoup(page_source, 'html.parser')
    span_tag = soup.find('span', class_='QuoteStrip-lastPrice')
    price = span_tag.text.strip()
    print(price)

    # Update the existing label text instead of creating a new label
    label_SXR8_price.config(text="Current price: " + price + "€", background="#AFE1AF")

    save_to_database(price)
    print_database()
    # Schedule next check after 60 seconds (adjust as needed)
    root.after(int(86400 * 1000 / in_per_day), check_SXR8)


label_SXR8_price = Label(root, text="not needed: ", font=("Arial", 22), width=widget_width, height=widget_height,
                         anchor="w")
label_SXR8_price.place(relx=0, rely=0.25, anchor="nw")
just_label_SXR8 = Label(root, text="SXR8", font=("Arial", 50), background="#AFE1AF")
just_label_SXR8.place(relx=SXR8_place_info['relx'], rely=SXR8_place_info['rely'],
                       anchor=SXR8_place_info['anchor'])


check_SXR8()

###########################################################################################################
def get_prices_by_week():
    global in_per_day
    global max_price
    conn = sqlite3.connect('prices.db')
    c = conn.cursor()

    # Calculate start and end dates for the current week
    today = datetime.date.today()
    start_of_week = today - datetime.timedelta(days=today.weekday())
    end_of_week = start_of_week + datetime.timedelta(days=6)

    # Format dates as strings
    start_of_week_str = start_of_week.strftime('%Y-%m-%d 00:00:00')
    end_of_week_str = end_of_week.strftime('%Y-%m-%d 23:59:59')

    # Query to select prices within the current week
    c.execute("SELECT * FROM SXR8_prices WHERE date_collected BETWEEN ? AND ?",
              (start_of_week_str, end_of_week_str))
    rows = c.fetchall()

    print("Price data for the current week:")
    for row in rows:
        print(row)

    prices = [float(row[1]) for row in rows]  # Extract prices as floats

    if prices:
        max_price = max(prices)
        min_price = min(prices)
        print("Highest price of the week:", max_price)
        print("Lowest price of the week:", min_price)

        # Update labels with the latest highest and lowest prices
        lbl_weekly_highest.config(text="Weekly highest: " + str(max_price)+ "€")
        lbl_weekly_lowest.config(text="Weekly lowest: " + str(min_price)+ "€")

    else:
        print("No price data available for the current week.")

    conn.close()

    # Schedule the next update after a certain interval (e.g., every hour)
    root.after(int(86400 * 1000 / in_per_day), get_prices_by_week)  # 3600000 milliseconds = 1 hour
###########################################################################################################
# Create the labels for weekly highest and lowest prices
lbl_weekly_highest = Label(root, text="", background="#AFE1AF", font=("Arial", 22),
                           width=widget_width, height=widget_height, anchor="w")
lbl_weekly_highest.place(relx=0, rely=0.45, anchor="nw")

lbl_weekly_lowest = Label(root, text="", background="#AFE1AF", font=("Arial", 22),
                          width=widget_width, height=widget_height, anchor="w")
lbl_weekly_lowest.place(relx=0, rely=0.55, anchor="nw")

# Initial call to get_prices_by_week to populate the labels
get_prices_by_week()

###########################################################################################################

lbl_Stock_Interval = Label(root, text="$tock check interval (per day):", background="#AFE1AF", font=("Arial", 22),
                           width=widget_width, height=widget_height, anchor="w")
lbl_Stock_Interval.place(relx=0, rely=0.35, anchor="nw")



lbl_Email_Rate = Label(root, text="Email send rate (% depreciation):", background="#AFE1AF", font=("Arial", 22),
                       width=widget_width, height=widget_height, anchor="w")
lbl_Email_Rate.place(relx=0, rely=0.65, anchor="nw")

###########################################################################################################


Entry_Stock_interval = Entry(font=("Arial", 20), width=5)
Entry_Stock_interval.place(relx=0.55, rely=0.41, anchor="w")
Entry_Stock_interval.configure(borderwidth=2, relief="solid")

Entry_Email_rate = Entry(font=("Arial", 20), width=5)
Entry_Email_rate.place(relx=0.55, rely=0.71, anchor="w")
Entry_Email_rate.configure(borderwidth=2, relief="solid")

###########################################################################################################

# Button to navigate to the next page
btn = Button(root,
             text="Next Page",
             command=next_page,
             font=("Arial", 15),
             fg="#227d22",
             bg="Black",
             activeforeground="#227d22",
             activebackground="#00ff00",
             )
btn.place(relx=btn_placement_info['relx'], rely=btn_placement_info['rely'], anchor=btn_placement_info['anchor'])




###########################################################################################################
def vnos_email_rate():
    global email_rate
    email_rate = float(Entry_Email_rate.get())
    print(email_rate)

###########################################################################################################
def vnos_interval_set():
    global in_per_day
    in_per_day = float(Entry_Stock_interval.get())
    print(in_per_day)


###########################################################################################################


BTN_INTERVAL_SET = Button(root,
                         text="SET",
                         command=vnos_interval_set,
                         font=("Arial", 15),
                         fg="#227d22",
                         bg="Black",
                         activeforeground="#227d22",
                         activebackground="#00ff00",
                         )

BTN_INTERVAL_SET.place(relx=0.7, rely=0.41, anchor="w")

BTN_RATE_SET = Button(root,
                      text="SET",
                      command=vnos_email_rate,
                      font=("Arial", 15),
                      fg="#227d22",
                      bg="Black",
                      activeforeground="#227d22",
                      activebackground="#00ff00",
                      )

BTN_RATE_SET.place(relx=0.7, rely=0.71, anchor="w")



###########################################################################################################
def send_email():
    conn = sqlite3.connect('emails.db')
    c = conn.cursor()
    try:
        # Email configuration
        posiljatelj = "ENTER EMAIL ADDRESS"
        geslo = "ENTER YOUR EMAIL PASSWORD"
        subject = "SXR8 Stock price"
        body = "Cena delnice SXR8 je padla iz " + str(max_price)+"€" +" na "+ price + "€."

        # Connect to SMTP server
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(posiljatelj, geslo)

        # Retrieve emails from the database
        c.execute("SELECT email FROM emails")
        emails = c.fetchall()
        if emails:
            for email in emails:
                prejemnik = email[0]
                # Construct email message
                message = MIMEMultipart()
                message['From'] = posiljatelj
                message['To'] = prejemnik
                message['Subject'] = subject
                message.attach(MIMEText(body, 'plain'))
                # Send email
                server.sendmail(posiljatelj, prejemnik, message.as_string())
                print(f"Email has been sent to {prejemnik}")
        else:
            print("No emails found in the database")

        # Close the SMTP server connection
        server.quit()

    except smtplib.SMTPAuthenticationError:
        print("Authentication failed. Please check your email and password.")
    except smtplib.SMTPException as e:
        print("An error occurred:", e)
    except Exception as e:
        print("An unexpected error occurred:", e)
    conn.close()
###########################################################################################################
def kalkuliranje():
    global email_rate
    calculated_percent = email_rate/100
    price_float = float(price)
    if (price_float+ price_float*calculated_percent)<max_price:
        send_email()
    root.after((86000*1000), kalkuliranje)
kalkuliranje()
print(email_rate)
###########################################################################################################

# Main loop
root.mainloop()
